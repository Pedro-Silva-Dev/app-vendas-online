{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/cadastrar/cadastrar.component.ts","./src/app/auth/cadastrar/cadastrar.component.html","./src/app/auth/login/auth.component.ts","./src/app/auth/login/auth.component.html","./src/app/auth/models/user.model.ts","./src/app/shared/validations/validator.service.ts"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["import { CadastrarComponent } from './cadastrar/cadastrar.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthComponent } from './login/auth.component';\n\nconst routes: Routes = [\n  { path: '', component: AuthComponent },\n  { path: 'cadastrar', component: CadastrarComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { SharedModule } from './../shared/shared.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { AuthComponent } from './login/auth.component';\nimport { CadastrarComponent } from './cadastrar/cadastrar.component';\n\n\n@NgModule({\n  declarations: [\n    AuthComponent,\n    CadastrarComponent\n  ],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    ReactiveFormsModule,\n    SharedModule\n  ]\n})\nexport class AuthModule { }\n","import { HttpResponse } from '@angular/common/http';\nimport { AuthService } from './../auth.service';\nimport { ValidatorService } from './../../shared/validations/validator.service';\nimport { isSenhaValid, isNotNull } from './../../shared/validations/validations';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\nimport { User } from '../models/user.model';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-cadastrar',\n  templateUrl: './cadastrar.component.html',\n  styleUrls: ['./cadastrar.component.css']\n})\nexport class CadastrarComponent implements OnInit {\n\n  cadastrarForm: FormGroup;\n  processoDeCadastrar: boolean;\n\n  constructor(\n    private _formBuilder: FormBuilder,\n    private _validatorService: ValidatorService,\n    private _authService: AuthService,\n    private _toastrService: ToastrService,\n    private _router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.criarCadastrarForm();\n  }\n\n  /**\n   * Cria o formulario responsavel por cadastrar um novo usuario.\n   */\n  criarCadastrarForm(){\n    this.cadastrarForm = this._formBuilder.group({\n      id: [null],\n      nome: ['', [Validators.required, isNotNull]],\n      email: ['', [Validators.required, Validators.email], [this._validatorService.checarEmail()]],\n      senha: ['', [Validators.required, Validators.minLength(6), isNotNull]],\n      reSenha: ['', [Validators.required, Validators.minLength(6), isNotNull]]\n    }, {validator: isSenhaValid})\n  }\n\n  /**\n   * Verifica se o formulario está valido e executa a chamada de cadastro de usuarios.\n   */\n  cadastrar(){\n    if(!this.cadastrarForm.invalid){\n      this.processoDeCadastrar = true;\n      let usuario: User = new User(this.cadastrarForm.value)\n      this._authService.cadastrarUsuario(usuario).subscribe(\n        (res: HttpResponse<User>) => {\n          if(res.status == 201){\n            this._authService.salvarUser(res.body);\n            this._toastrService.success(`Bem vindo a plataforma!`);\n            this._router.navigate([`/dashboard`]);\n          }else{\n            this._toastrService.warning(`Ocorreu um erro no processo de cadastro, por favor tente novamente.`);\n          }\n          this.processoDeCadastrar = false;\n        }, err => {\n          this.processoDeCadastrar = false;\n          this._toastrService.error(`Ocorreu um erro ao tentar cadastrar o usuário, por favor contate o suporte.`)\n        })\n    }\n  }\n\n  /**\n   * Verifica se o campo foi alterado e se está invalido.\n   * @param campo\n   */\n  validarCampo(campo: string): boolean{\n    return !this.cadastrarForm.get(campo).valid && this.cadastrarForm.get(campo).touched;\n  }\n\n  /**\n   * Verifica se o campo foi alterado e está valido.\n   * @param campo\n   */\n  campoCorreto(campo: string): boolean{\n    return this.cadastrarForm.get(campo).valid && this.cadastrarForm.get(campo).touched;\n  }\n\n  /**\n   * Verifica se as senhas foram alteradas e se estão validas.\n   */\n  validarCampoSenha():boolean{\n    return (this.cadastrarForm.hasError('senha') && this.cadastrarForm.get('reSenha').touched && this.cadastrarForm.get('senha').touched) ? false : true;\n  }\n\n\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-lg-12 d-flex justify-content-center align-items-center cadastrar-height\">\n      <div class=\"ui-card\">\n        <div class=\"ui-card p-4\">\n          <h3 class=\"h3 mb-4\">Cadastrar Novo Usuário</h3>\n          <form [formGroup]=\"cadastrarForm\" (submit)=\"cadastrar()\">\n              <div class=\"form-group\">\n                <label class=\"sr-only\" for=\"nome\">Nome</label>\n                <input formControlName=\"nome\" type=\"text\" [ngClass]=\"{'is-invalid': validarCampo('nome'), 'is-valid': campoCorreto('nome'), 'form-control': true}\" id=\"nome\" placeholder=\"Nome\">\n                <small *ngIf=\"validarCampo('nome')\" class=\"text-danger\">Esse campo é obrigatório</small>\n              </div>\n              <div class=\"form-group\">\n                <label class=\"sr-only\" for=\"email\">Email</label>\n                <input formControlName=\"email\" type=\"text\" [ngClass]=\"{'is-invalid': validarCampo('email'), 'is-valid': campoCorreto('email'), 'form-control': true}\" id=\"email\" placeholder=\"Email\">\n                <small *ngIf=\"cadastrarForm.get('email').hasError('email')\" class=\"text-danger\">Email inválido<br></small>\n                <small *ngIf=\"cadastrarForm.get('email').hasError('emailCadastrado')\" class=\"text-danger\">Email já possui cadastro<br></small>\n                <small *ngIf=\"validarCampo('email')\" class=\"text-danger\">Esse campo é obrigatório</small>\n              </div>\n              <div class=\"form-group\">\n                <label class=\"sr-only\" for=\"senha\">Senha</label>\n                <input formControlName=\"senha\" type=\"password\" autocomplete=\"false\" [ngClass]=\"{'is-invalid': (validarCampo('senha') || !validarCampoSenha()), 'is-valid': (campoCorreto('senha') && !cadastrarForm.hasError('senha')), 'form-control': true}\" id=\"senha\" placeholder=\"Senha\">\n                <small *ngIf=\"cadastrarForm.get('senha').hasError('minlenght')\" class=\"text-danger\">A senha deve ser maior que 6 characters<br></small>\n                <small *ngIf=\"!validarCampoSenha()\" class=\"text-danger\">As senhas devem ser iguais.<br></small>\n                <small *ngIf=\"validarCampo('senha')\" class=\"text-danger\">Esse campo é obrigatório</small>\n              </div>\n              <div class=\"form-group\">\n                <label class=\"sr-only\" for=\"reSenha\">Repetir Senha</label>\n                <input formControlName=\"reSenha\" type=\"password\" autocomplete=\"false\" [ngClass]=\"{'is-invalid': (validarCampo('reSenha') || !validarCampoSenha()), 'is-valid': (campoCorreto('reSenha') && !cadastrarForm.hasError('senha')), 'form-control': true}\" id=\"reSenha\" placeholder=\"Repetir senha\">\n                <small *ngIf=\"cadastrarForm.get('reSenha').hasError('minlenght')\" class=\"text-danger\">A senha deve ser maior que 6 characters<br></small>\n                <small *ngIf=\"!validarCampoSenha()\" class=\"text-danger\">As senhas devem ser iguais.<br></small>\n                <small *ngIf=\"validarCampo('reSenha')\" class=\"text-danger\">Esse campo é obrigatório</small>\n              </div>\n              <div class=\"form-group d-flex justify-content-between\">\n                  <a [routerLink]=\"['/']\" class=\"d-flex align-items-center\">Voltar</a>\n                  <button [disabled]=\"cadastrarForm.invalid || cadastrarForm.pending\" type=\"submit\" class=\"btn btn-outline-primary\"><span *ngIf=\"!processoDeCadastrar; else spinner\">Cadastrar</span></button>\n              </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #spinner>\n  <app-spinner></app-spinner>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\nimport { HttpResponse } from '@angular/common/http';\nimport { AuthService } from '../auth.service';\nimport { User } from '../models/user.model';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css']\n})\nexport class AuthComponent implements OnInit {\n\n  loginForm: FormGroup;\n  processoDeLogin: boolean;\n\n  constructor(\n    private _formBuilder: FormBuilder,\n    private _authService: AuthService,\n    private _toastrService: ToastrService,\n    private _router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.criarLoginForm();\n  }\n\n  /**\n   * Responsavel por criar o formulario para efetuar o login.\n   */\n  criarLoginForm(){\n    this.loginForm = this._formBuilder.group({\n      email: [``, [Validators.required, Validators.email]],\n      senha: [``, [Validators.required]]\n    })\n  }\n\n  /**\n   * Verifica se o formulario está valido e executa o processo de login.\n   */\n  efetuarLogin(){\n   if(this.loginForm.valid){\n     this.processoDeLogin = true;\n    this._authService.efetuarLogin(this.loginForm.value).subscribe(\n      (res: HttpResponse<User[]>) => {\n        if(res.status == 200){\n          let user: User = res.body.find(r => r.email == this.loginForm.value.email);\n          if(user){\n            this._authService.salvarUser(user);\n            this._router.navigate([\"/dashboard\"]);\n          }else{\n            this._toastrService.warning(`Email ou senha inválidos.`);\n          }\n        }\n        this.processoDeLogin = false;\n      }, err => {\n        this._toastrService.error(`Ocorreu um erro ao tentar entrar no sistema, por favor contate o suporte.`);\n        this.processoDeLogin = false;\n      });\n   }\n  }\n\n  /**\n   * Verifica se o campo foi alterado e valido.\n   * @param campo\n   */\n  validarCampo(campo: string): boolean{\n    return this.loginForm.get(campo).invalid && this.loginForm.get(campo).touched;\n  }\n\n\n\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-lg-12 d-flex justify-content-center align-items-center login-height\">\n      <div class=\"ui-card\">\n        <div class=\"ui-card p-4\">\n          <h3 class=\"h3 mb-4 d-flex justify-content-center\">Sana Variedades</h3>\n          <form [formGroup]=\"loginForm\" (submit)=\"efetuarLogin()\">\n              <div class=\"form-group\">\n                <label class=\"sr-only\" for=\"email\">email</label>\n                <div class=\"input-group\">\n                  <div class=\"input-group-prepend\">\n                    <div class=\"input-group-text\"><span class=\"material-icons-outlined\">email</span></div>\n                  </div>\n                  <input formControlName=\"email\" type=\"text\" class=\"form-control {{validarCampo('email') ? 'is-invalid' : 'is-valid'}}\" id=\"email\" placeholder=\"Email\">\n                </div>\n                <small *ngIf=\"loginForm.get('email').hasError('email')\" class=\"text-danger\">Email inválido<br></small>\n                <small *ngIf=\"validarCampo('email')\" class=\"text-danger\">Esse campo é obrigatório</small>\n              </div>\n              <div class=\"form-group\">\n                <label class=\"sr-only\" for=\"senha\">senha</label>\n                <div class=\"input-group\">\n                  <div class=\"input-group-prepend\">\n                    <div class=\"input-group-text\"><span class=\"material-icons-outlined\">vpn_key</span></div>\n                  </div>\n                  <input formControlName=\"senha\" type=\"password\" class=\"form-control {{validarCampo('senha') ? 'is-invalid' : 'is-valid'}}\" id=\"senha\" placeholder=\"Senha\">\n                </div>\n                <small *ngIf=\"validarCampo('senha')\" class=\"text-danger\">Esse campo é obrigatório</small>\n              </div>\n              <div class=\"form-group d-flex justify-content-between\">\n                  <a [routerLink]=\"['/cadastrar']\" class=\"d-flex align-items-center\">Criar conta</a>\n                  <button [disabled]=\"loginForm.invalid\" type=\"submit\" class=\"btn btn-outline-primary\"><span *ngIf=\"!processoDeLogin; else spinner\">Entrar</span></button>\n              </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #spinner>\n  <app-spinner></app-spinner>\n</ng-template>\n","export class User{\r\n  id: number;\r\n  nome: string;\r\n  email: string;\r\n  senha: string;\r\n\r\n  constructor(user: User){\r\n    this.id = user.id;\r\n    this.nome = user.nome;\r\n    this.email = user.email;\r\n    this.senha = user.senha;\r\n  }\r\n}\r\n","import { AuthService } from './../../auth/auth.service';\nimport { AbstractControl } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { debounceTime, switchMap, map, first, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidatorService {\n\n  constructor(\n    private _authService: AuthService\n  ) { }\n\n  /**\n   * Verifica se o email já foi cadastrado no banco.\n   */\n  checarEmail(){\n    return (control: AbstractControl) => {\n      return control.valueChanges\n        .pipe(debounceTime(300))\n        .pipe(switchMap((email: string) =>  this._authService.verificarEmail(email)))\n        .pipe(map(res => res.body.find(u => u.email == control.value) ? {emailCadastrado: true} : null))\n        .pipe(first());\n    }\n  }\n\n}\n"],"sourceRoot":"webpack:///"}