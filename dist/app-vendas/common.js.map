{"version":3,"sources":["./src/app/categoria/categoria.service.ts","./src/app/shared/validations/validations.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACyB;AAIpB;;;AAKpC,MAAM,gBAAgB;IAE3B,YACU,KAAiB;QAAjB,UAAK,GAAL,KAAK,CAAY;IACvB,CAAC;IAEL;;;;OAIG;IACH,oBAAoB,CAAC,MAAc,EAAE,OAAe;QAClD,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAc,GAAG,qEAAW,CAAC,QAAQ,qBAAqB,MAAM,WAAW,OAAO,EAAE,EAAE,EAAC,OAAO,EAAE,UAAU,EAAC,CAAC,CAAC,IAAI,CAAC,2DAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClJ,CAAC;IAED;;OAEG;IACH,mBAAmB;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAc,GAAG,qEAAW,CAAC,QAAQ,aAAa,EAAE,EAAC,OAAO,EAAE,UAAU,EAAC,CAAC,CAAC,IAAI,CAAC,2DAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAChH,CAAC;IAED;;;OAGG;IACH,SAAS,CAAC,SAAoB;QAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAY,GAAG,qEAAW,CAAC,QAAQ,aAAa,EAAE,SAAS,EAAE,EAAC,OAAO,EAAE,UAAU,EAAC,CAAC,CAAC,IAAI,CAAC,2DAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1H,CAAC;IAED;;;OAGG;IACH,SAAS,CAAC,SAAoB;QAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAY,GAAG,qEAAW,CAAC,QAAQ,eAAe,SAAS,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,EAAC,OAAO,EAAE,UAAU,EAAC,CAAC,CAAC,IAAI,CAAC,2DAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACzI,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,EAAU;QAChB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAO,GAAG,qEAAW,CAAC,QAAQ,eAAe,EAAE,EAAE,EAAE,EAAC,OAAO,EAAE,UAAU,EAAC,CAAC,CAAC,IAAI,CAAC,2DAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClH,CAAC;;gFA5CU,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB,mBAFf,MAAM;6FAEP,gBAAgB;cAH5B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACPD;AAAA;AAAA;AAAA;;GAEG;AACI,MAAM,YAAY,GAAgB,CAAC,SAAoB,EAAE,EAAE;IAChE,IAAG,SAAS,EAAC;QACX,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC3C,MAAM,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;QAE/C,OAAO,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC;KACjD;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;GAEG;AACI,MAAM,SAAS,GAAgB,CAAC,IAAqB,EAAE,EAAE;IAC9D,IAAG,IAAI,EAAC;QACN,IAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAC;YACjC,OAAO,IAAI,CAAC;SACb;QACD,OAAO,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;KACxB;IACD,OAAO,IAAI,CAAC;AACd,CAAC","file":"common.js","sourcesContent":["import { take } from 'rxjs/operators';\nimport { environment } from './../../environments/environment';\nimport { Categoria } from './models/categoria.model';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoriaService {\n\n  constructor(\n    private _http: HttpClient\n  ) { }\n\n  /**\n   * Obtem uma pagina com os dados de categoria.\n   * @param pagina\n   * @param tamanho\n   */\n  obterPaginaCategoria(pagina: number, tamanho: number): Observable<HttpResponse<Categoria[]>>{\n    return this._http.get<Categoria[]>(`${environment.BASE_URL}/categorias?_page=${pagina}&_limit=${tamanho}`, {observe: \"response\"}).pipe(take(1));\n  }\n\n  /**\n   * Obtem uma lista com todas as categorias.\n   */\n  obterListaCategoria(): Observable<HttpResponse<Categoria[]>>{\n    return this._http.get<Categoria[]>(`${environment.BASE_URL}/categorias`, {observe: \"response\"}).pipe(take(1));\n  }\n\n  /**\n   * Persiste uma categoria no banco.\n   * @param categoria\n   */\n  cadastrar(categoria: Categoria): Observable<HttpResponse<Categoria>>{\n    return this._http.post<Categoria>(`${environment.BASE_URL}/categorias`, categoria, {observe: \"response\"}).pipe(take(1));\n  }\n\n  /**\n   * Atualiza os dados de uma categoria.\n   * @param categoria\n   */\n  atualizar(categoria: Categoria): Observable<HttpResponse<Categoria>>{\n    return this._http.put<Categoria>(`${environment.BASE_URL}/categorias/${categoria.id}`, categoria, {observe: \"response\"}).pipe(take(1));\n  }\n\n  /**\n   * Exclui uma categoria.\n   * @param id\n   */\n  excluir(id: number): Observable<HttpResponse<void>>{\n    return this._http.delete<void>(`${environment.BASE_URL}/categorias/${id}`, {observe: \"response\"}).pipe(take(1));\n  }\n\n}\n","import { ValidatorFn, FormGroup, AbstractControl } from '@angular/forms';\r\n\r\n/**\r\n * Verifica se as senhas são iguais.\r\n */\r\nexport const isSenhaValid: ValidatorFn = (formGroup: FormGroup) => {\r\n  if(formGroup){\r\n    const senha = formGroup.get('senha').value;\r\n    const reSenha = formGroup.get('reSenha').value;\r\n\r\n    return senha === reSenha ? null : {senha: true};\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Verifica se o campo é nulo.\r\n */\r\nexport const isNotNull: ValidatorFn = (form: AbstractControl) => {\r\n  if(form){\r\n    if(form.value && form.value.trim()){\r\n      return null;\r\n    }\r\n    return {notNull: true};\r\n  }\r\n  return null;\r\n}\r\n\r\n"],"sourceRoot":"webpack:///"}