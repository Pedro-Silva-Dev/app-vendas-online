{"version":3,"sources":["./src/app/produto/models/produto.model.ts","./src/app/produto/produto-form/produto-form.component.ts","./src/app/produto/produto-form/produto-form.component.html","./src/app/produto/produto-routing.module.ts","./src/app/produto/produto.component.ts","./src/app/produto/produto.component.html","./src/app/produto/produto.module.ts","./src/app/produto/produto.service.ts"],"names":[],"mappings":"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","file":"produto-produto-module.js","sourcesContent":["export class Produto{\r\n  id: number;\r\n  nome: string;\r\n  valor: number;\r\n  categoriaId: number;\r\n}\r\n","import { ToastrService } from 'ngx-toastr';\nimport { HttpResponse } from '@angular/common/http';\nimport { isNotNull } from './../../shared/validations/validations';\nimport { Produto } from './../models/produto.model';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ProdutoService } from './../produto.service';\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Categoria } from 'src/app/categoria/models/categoria.model';\n\n@Component({\n  selector: 'app-produto-form',\n  templateUrl: './produto-form.component.html',\n  styleUrls: ['./produto-form.component.css']\n})\nexport class ProdutoFormComponent implements OnInit {\n\n  @Input() produto: Produto;\n  @Input() categorias: Categoria[] = [];\n  @Output() eventFechar: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() eventReload: EventEmitter<Produto> = new EventEmitter<Produto>();\n\n  produtoForm: FormGroup;\n  processando: boolean;\n\n  constructor(\n    private _produtoService: ProdutoService,\n    private _formBuilder: FormBuilder,\n    private _toastrService: ToastrService\n  ) { }\n\n  ngOnInit(): void {\n    this.criarProdutoForm();\n  }\n\n  /**\n   * Responsavel por criar o formulario para cadastrar ou atualizar um produto.\n   */\n  criarProdutoForm(){\n    this.produtoForm = this._formBuilder.group({\n      id: [this.produto.id],\n      nome: [this.produto.nome, [Validators.required, isNotNull]],\n      valor: [this.produto.valor, [Validators.required]],\n      categoriaId: [this.produto.categoriaId, [Validators.required]]\n    });\n  }\n\n  /**\n   * Executa o metodo de atualizar caso o produto ja exista, caso contrario executa o de cadastro.\n   */\n  salvar(){\n    if(this.produtoForm.valid){\n      this.processando = true;\n      if(this.produto.id){\n        this.atualizar();\n      }else{\n        this.cadastrar();\n      }\n    }\n  }\n\n  /**\n   * Emite o evento para fechar o modal.\n   */\n  fechar(){\n    this.eventFechar.emit(true);\n  }\n\n  /**\n   * Atualiza um produto.\n   */\n  atualizar(){\n    this._produtoService.atualizar(this.produtoForm.value).subscribe(\n      (res: HttpResponse<Produto>) => {\n        if(res.status == 200){\n          if(res.body.id){\n            this._toastrService.success(`Produto atualizado com sucesso!`);\n            this.eventReload.emit(res.body);\n            this.eventFechar.emit(true);\n          }else{\n            this._toastrService.warning(`Ocorreu um erro ao tentar obter os resultados da atualização, por favor tente novamente.`);\n            this.processando = false;\n          }\n        }else{\n          this._toastrService.warning(`Ocorreu um erro na resposta da atualização, por favor tente novamente.`);\n          this.processando = false;\n        }\n      }, err => {\n        this._toastrService.error(`Ocorreu um erro no processo de atualização, por favor contate o suporte.`);\n        this.processando = false;\n      });\n  }\n\n  /**\n   * Cadastra um produto.\n   */\n  cadastrar(){\n    this._produtoService.cadastrar(this.produtoForm.value).subscribe(\n      (res: HttpResponse<Produto>) => {\n        if(res.status == 201){\n          if(res.body.id){\n            this._toastrService.success(`Produto cadastrado com sucesso!`);\n            this.eventReload.emit(res.body);\n            this.eventFechar.emit(true);\n          }else{\n            this._toastrService.warning(`Ocorreu um erro ao tentar obter os resultados do cadastro, por favor tente novamente.`);\n            this.processando = false;\n          }\n        }else{\n          this._toastrService.warning(`Ocorreu um erro na resposta do cadastro, por favor tente novamente.`);\n          this.processando = false;\n        }\n      }, err => {\n        this._toastrService.error(`Ocorreu um erro no processo de cadastro, por favor contate o suporte.`);\n        this.processando = false;\n      });\n  }\n\n  /**\n   * Verifica se o campo foi alterado e se está valido.\n   * @param campo\n   */\n  validarCampo(campo: string): boolean{\n    return this.produtoForm.get(campo).invalid && this.produtoForm.get(campo).touched;\n  }\n\n}\n","<div class=\"modal-header\">\n  <h4 class=\"modal-title pull-left\">{{produto?.id ? 'Atualizar' : 'Cadastrar'}} Produto</h4>\n  <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"fechar()\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n</div>\n<form [formGroup]=\"produtoForm\" (submit)=\"salvar()\">\n  <div class=\"modal-body\">\n    <div class=\"form-group\">\n      <label for=\"nome\">Nome<span class=\"text-danger\">*</span></label>\n      <input formControlName=\"nome\" type=\"text\" id=\"nome\" placeholder=\"Nome do produto\" [ngClass]=\"{'form-control': true, 'is-invalid': validarCampo('nome')}\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"valor\">Valor<span class=\"text-danger\">*</span></label>\n      <input formControlName=\"valor\" placeholder=\"R$99.99\" prefix=\"R$\" [allowNegativeNumbers]=\"false\" thousandSeparator=\",\" mask=\"separator\" type=\"text\" id=\"valor\" [ngClass]=\"{'form-control': true, 'is-invalid': validarCampo('valor')}\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"categoria\">Categoria<span class=\"text-danger\">*</span></label>\n      <select formControlName=\"categoriaId\" id=\"categoria\" [ngClass]=\"{'form-control': true, 'is-invalid': validarCampo('categoriaId')}\">\n        <option value=\"null\">Selecione uma categoria</option>\n        <option *ngFor=\"let categoria of categorias\" [value]=\"categoria.id\">{{categoria.nome}}</option>\n      </select>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button (click)=\"fechar()\" class=\"btn btn-outline-secondary\" id=\"voltar\" type=\"button\">Voltar</button>\n    <button [disabled]=\"produtoForm.invalid\" class=\"btn btn-outline-primary\" id=\"cadastrar\" type=\"submit\"><span *ngIf=\"!processando; else spinner\">{{produto?.id ? 'Atualizar' : 'Cadastrar'}}</span></button>\n  </div>\n\n</form>\n\n\n<ng-template #spinner>\n  <app-spinner></app-spinner>\n</ng-template>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ProdutoComponent } from './produto.component';\n\nconst routes: Routes = [{ path: '', component: ProdutoComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ProdutoRoutingModule { }\n","import { FormBuilder, FormGroup } from '@angular/forms';\nimport { CategoriaService } from './../categoria/categoria.service';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { Produto } from './models/produto.model';\nimport { HttpResponse } from '@angular/common/http';\nimport { ToastrService } from 'ngx-toastr';\nimport { ProdutoService } from './produto.service';\nimport { Component, OnInit, TemplateRef } from '@angular/core';\nimport { Categoria } from '../categoria/models/categoria.model';\n\n@Component({\n  selector: 'app-produto',\n  templateUrl: './produto.component.html',\n  styleUrls: ['./produto.component.css']\n})\nexport class ProdutoComponent implements OnInit {\n\n  //Config paginação.\n  pagina: number = 1;\n  tamanho: number = 12;\n  totalItems: number = 0;\n  //Config produtos.\n  produtos: Produto[];\n  produto: Produto;\n  modalRef: BsModalRef;\n  categorias: Categoria[];\n  filtroForm: FormGroup;\n\n  constructor(\n    private _produtoService: ProdutoService,\n    private _categoriaService: CategoriaService,\n    private _toastrService: ToastrService,\n    private _modalService: BsModalService,\n    private _formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n    this.criarFiltroForm();\n    this.obterListaCategoria();\n    this.obterPaginaProduto(this.pagina);\n  }\n\n  /**\n   * Responsavel por criar o formulario de filtro.\n   */\n  criarFiltroForm(){\n    this.filtroForm = this._formBuilder.group({\n      nome: [null],\n      valorMin: [null],\n      valorMax: [null],\n      categoria: [null]\n    });\n  }\n\n  /**\n   * Filtra os produtos de acordo com os parametros do formulario.\n   */\n  filtrar(){\n    this.pagina = 0;\n    this.obterPaginaProduto(this.pagina);\n  }\n\n  /**\n   * Obtem uma pagina de produtos de acordo com a filtragem.\n   * @param pagina\n   */\n  obterPaginaProduto(pagina: number){\n    let form = this.filtroForm.value;\n    this._produtoService.obterPaginaProduto(pagina, this.tamanho, form.nome, form.valorMin, form.valorMax, form.categoria).subscribe(\n      (res: HttpResponse<Produto[]>) => {\n        if(res.status == 200){\n          this.produtos = res.body;\n          this.totalItems = Number.parseInt(res.headers.get('X-Total-Count'));\n        }\n      }, err => this._toastrService.error(`Ocorreu um erro ao carregar os produtos, por favor entre em contato com o suporte.`));\n  }\n\n  /**\n   *Exibi o modal para castrar ou atualizar um produto.\n   * @param template\n   * @param produto\n   */\n  exibirProdutoForm(template: TemplateRef<any>, produto?: Produto){\n    this.produto = new Produto();\n    if(produto){\n      this.produto = produto;\n    }\n    this.modalRef = this._modalService.show(template, {ignoreBackdropClick: true, class: \"modal-md\"});\n  }\n\n  /**\n   * Exclui um produto.\n   * @param id\n   */\n  excluir(id: number){\n    this._produtoService.excluir(id).subscribe(\n      (res: HttpResponse<void>) => {\n        if(res.status == 200){\n          this._toastrService.success(`Produto excluido com sucesso!`);\n          this.produtos = this.produtos.filter(p => p.id != id);\n        }\n      }, err => this._toastrService.error(`Ocorreu um erro ao tentar excluir, por favor contate o suporte.`));\n  }\n\n  /**\n   * Fecha o modal de cadastro ou atualização.\n   */\n  fecharModal(){\n    this.modalRef.hide();\n  }\n\n  /**\n   * Obtem uma lista com todas as categorias.\n   */\n  obterListaCategoria(){\n    this._categoriaService.obterListaCategoria().subscribe(\n      (res: HttpResponse<Categoria[]>) => {\n        if(res.status == 200){\n          this.categorias = res.body;\n        }\n      }, err => this._toastrService.error(`Ocorreu um erro ao carregar as categorias, por favor contate o surpote.`));\n  }\n\n  /**\n   * Reseta todos os campos do formulario e obtem uma nova pagina.\n   */\n  limparFiltros(){\n    this.filtroForm.reset();\n    this.filtroForm.get('categoria').setValue(null);\n    this.pagina = 0;\n    this.obterPaginaProduto(this.pagina);\n  }\n\n  /**\n   * Verifica se deve exibir o botão de limpar os filtros.\n   */\n  exibirLimparFiltro(): boolean{\n    return this.filtroForm.get('nome').value || this.filtroForm.get('valorMin').value || this.filtroForm.get('valorMax').value || this.filtroForm.get('categoria').value;\n  }\n\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-lg-12 d-flex justify-content-between mt-4\">\n      <h3 class=\"title d-flex align-items-center\">Produtos</h3>\n      <button (click)=\"exibirProdutoForm(produtoForm)\" class=\"btn btn-outline-primary\" type=\"button\">+ Novo Produto</button>\n    </div>\n  </div>\n  <hr>\n  <form [formGroup]=\"filtroForm\" class=\"form-inline mb-4\" (submit)=\"filtrar()\">\n    <input formControlName=\"nome\" type=\"text\" placeholder=\"Nome do produto\" id=\"nome\" class=\"form-control mr-2\">\n    <input formControlName=\"valorMin\" placeholder=\"Valor minimo\" class=\"form-control mr-2\" prefix=\"R$\" [allowNegativeNumbers]=\"false\" thousandSeparator=\",\" mask=\"separator\" type=\"text\" id=\"valorMin\">\n    <input formControlName=\"valorMax\" placeholder=\"Valor maximo\" class=\"form-control mr-2\" prefix=\"R$\" [allowNegativeNumbers]=\"false\" thousandSeparator=\",\" mask=\"separator\" type=\"text\" id=\"valorMax\">\n    <select formControlName=\"categoria\" id=\"categoria\" class=\"form-control mr-2\">\n      <option value=\"null\">Selecione uma categoria</option>\n      <option *ngFor=\"let categoria of categorias\" [value]=\"categoria.id\">{{categoria.nome}}</option>\n    </select>\n    <button class=\"btn btn-outline-primary mr-2\" id=\"filtrar\" type=\"submit\">Filtrar</button>\n    <button *ngIf=\"exibirLimparFiltro()\" (click)=\"limparFiltros()\" class=\"btn btn-outline-primary\" id=\"limpar\" type=\"button\">Limpar</button>\n  </form>\n\n  <div class=\"row\">\n    <div *ngFor=\"let produto of produtos\" class=\"col-lg-2\">\n      <div class=\"ui-card\">\n        <div class=\"ui-card-header\">\n          <span>{{produto['categoria']?.nome}}</span>\n          <img src=\"./assets/images/produto.png\" class=\"img-fluid\" alt=\"produto\">\n        </div>\n        <div class=\"ui-card-body d-flex justify-content-between\">\n          <div>\n            <h4 class=\"sub-title\">{{produto.nome}}</h4>\n            <h5 class=\"sub-title\">R$ {{produto.valor}}</h5>\n          </div>\n          <div class=\"pl-1 cursor-pointer\">\n            <div class=\"btn-group\" dropdown>\n              <span class=\"material-icons\" dropdownToggle>more_vert</span>\n              <ul id=\"dropdown-animated\" *dropdownMenu class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"button-animated\">\n                <li (click)=\"exibirProdutoForm(produtoForm, produto)\" role=\"menuitem\"><a class=\"dropdown-item\" href=\"javascript:void(0)\">Editar</a></li>\n                <li [swal]=\"deleteSwal\" (confirm)=\"excluir(produto.id)\" role=\"menuitem\"><a class=\"dropdown-item\" href=\"javascript:void(0)\">Excluir</a></li>\n              </ul>\n            </div>\n        </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"!produtos?.length\" class=\"row\">\n    <div class=\"col-lg-12\">\n      <div class=\"alert alert-info\" role=\"alert\">\n        Nenhuma informação encontrada.\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"(totalItems > tamanho)\" class=\"row\">\n    <div class=\"col-xs-12 col-12 mt-3\">\n      <pagination [totalItems]=\"totalItems\" nextText=\"Avançar\" previousText=\"Voltar\" [itemsPerPage]=\"tamanho\" (pageChanged)=\"obterPaginaProduto($event.page)\" [(ngModel)]=\"pagina\"></pagination>\n    </div>\n  </div>\n</div>\n\n<ng-template #produtoForm>\n  <app-produto-form [produto]=\"produto\" [categorias]=\"categorias\" (eventFechar)=\"fecharModal()\" (eventReload)=\"obterPaginaProduto(this.pagina)\"></app-produto-form>\n</ng-template>\n\n<swal\n  #deleteSwal\n  title=\"Realmente deseja excluir esse produto?\"\n  text=\"Essa ação é irreversível\"\n  icon=\"question\"\n  [showCancelButton]=\"true\"\n  [focusCancel]=\"true\"\n  cancelButtonText=\"Cancelar\"\n  cancelButtonColor=\"#2196F3\"\n  confirmButtonText=\"Excluir\"\n  confirmButtonColor=\"#dc3545\"\n  >\n</swal>\n\n","import { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { SharedModule } from './../shared/shared.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProdutoRoutingModule } from './produto-routing.module';\nimport { ProdutoComponent } from './produto.component';\nimport { ProdutoFormComponent } from './produto-form/produto-form.component';\n\n@NgModule({\n  declarations: [\n    ProdutoComponent,\n    ProdutoFormComponent\n  ],\n  imports: [\n    CommonModule,\n    ProdutoRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    SharedModule,\n  ]\n})\nexport class ProdutoModule { }\n","import { take } from 'rxjs/operators';\nimport { environment } from './../../environments/environment';\nimport { Produto } from './models/produto.model';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProdutoService {\n\n  constructor(\n    private _http: HttpClient\n  ) { }\n\n  /**\n   * Obtem uma pagina de produtos de acordo com os parametros.\n   * @param pagina\n   * @param tamanho\n   * @param nome\n   * @param valorMin\n   * @param valorMax\n   * @param categoria\n   */\n  obterPaginaProduto(pagina: number, tamanho: number, nome: string, valorMin: number, valorMax: number, categoria: string): Observable<HttpResponse<Produto[]>>{\n    return this._http.get<Produto[]>(`${environment.BASE_URL}/produtos?_expand=categoria&_page=${pagina}&_limit=${tamanho}${nome ? `&nome_like=${nome}` : ''}${valorMin ? `&valor_gte=${valorMin}` : ''}${valorMax ? `&valor_lte=${valorMax}` : ''}${categoria ? `&categoriaId=${categoria}` : ''}`, {observe: \"response\"}).pipe(take(1));\n  }\n\n  /**\n   * Obtem uma lista com todos os produtos.\n   */\n  obterListaProduto(): Observable<HttpResponse<Produto[]>>{\n    return this._http.get<Produto[]>(`${environment.BASE_URL}/produtos`, {observe: \"response\"}).pipe(take(1));\n  }\n\n  /**\n   * Persistem um produto no banco.\n   * @param produto\n   */\n  cadastrar(produto: Produto): Observable<HttpResponse<Produto>>{\n    return this._http.post<Produto>(`${environment.BASE_URL}/produtos`, produto, {observe: \"response\"}).pipe(take(1));\n  }\n\n  /**\n   * Atualiza os dados de um produto.\n   * @param produto\n   */\n  atualizar(produto: Produto): Observable<HttpResponse<Produto>>{\n    return this._http.put<Produto>(`${environment.BASE_URL}/produtos/${produto.id}`, produto, {observe: \"response\"}).pipe(take(1));\n  }\n\n  /**\n   * Exclui um produto do banco.\n   * @param id\n   */\n  excluir(id: number): Observable<HttpResponse<void>>{\n    return this._http.delete<void>(`${environment.BASE_URL}/produtos/${id}`, {observe: \"response\"}).pipe(take(1));\n  }\n\n}\n"],"sourceRoot":"webpack:///"}